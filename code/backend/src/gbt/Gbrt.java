package gbt;import gbt.ranker.GradientBoostingTree;import gbt.ranker.GradientBoostingTree.ResultFunction;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import java.util.Vector;public class Gbrt implements Serializable {	public GradientBoostingTree gbrt;	private ResultFunction resultFunction;	Boolean isTrain;	public static void writeToFile(Gbrt gbrt, String outModelPath)			throws IOException {		FileOutputStream fos;		fos = new FileOutputStream(outModelPath);		ObjectOutputStream oos = new ObjectOutputStream(fos);		oos.writeObject(gbrt);		oos.flush();		oos.close();	}	public static Gbrt readFromFile(String filePath) throws Exception {		FileInputStream fis = new FileInputStream(filePath);		ObjectInputStream oin = new ObjectInputStream(fis);		Gbrt ts = (Gbrt) oin.readObject();		return ts;	}	public Gbrt() {		gbrt = new GradientBoostingTree();		isTrain = false;	}	public Boolean trainParameters(double[][] x, double[] y) {		// TODO Auto-generated method stub		// transform input		Vector<Vector<Double>> input_x = new Vector<Vector<Double>>();		Vector<Double> input_y = new Vector<Double>();		for (int i = 0; i < x.length; i++) {			input_x.add(new Vector<Double>());			for (int j = 0; j < x[i].length; j++) {				input_x.get(i).add(x[i][j]);			}		}		for (int i = 0; i < y.length; i++) {			input_y.add(y[i]);		}		// train model		resultFunction = gbrt.gradient_boosting_tree(input_x, input_y);		isTrain = true;		return true;	}	public List<Double> test(double[][] x) {		// TODO Auto-generated method stub		if (!isTrain) {			return null;		}		List<Double> result = new ArrayList<Double>();		for (int i = 0; i < x.length; i++) {			Vector<Double> temp = new Vector<Double>();			for (int j = 0; j < x[i].length; j++) {				temp.add(x[i][j]);			}			result.add(resultFunction.get_value(temp));		}		return result;	}	public Double test(double[] x) {		// TODO Auto-generated method stub		if (!isTrain) {			return null;		}		Vector<Double> temp = new Vector<Double>();		for (int j = 0; j < x.length; j++) {			temp.add(x[j]);		}		return resultFunction.get_value(temp);	}}